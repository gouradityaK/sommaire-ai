{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 84, "column": 0}, "map": {"version":3,"sources":["file:///E:/Project%20That%20I%20Can%20Done%20nd%20Git%20Upl/summarized-app/app/api/uploadthing/core.ts"],"sourcesContent":["// import { currentUser } from \"@clerk/nextjs/server\";\r\n// import { UploadThingError } from \"uploadthing/server\";\r\n// import { createUploadthing, type FileRouter } from \"uploadthing/next\";\r\n// const f = createUploadthing();\r\n\r\n// export const ourFileRouter = {\r\n//     pdfUploader: f({ pdf: {maxFileSize: '32MB' } })\r\n//     .middleware(\r\n//         async ( { req } ) => {\r\n//             //get user information is here\r\n//             const user = await currentUser();\r\n//         if(!user) throw new UploadThingError\r\n//         ('Unauthorized');   \r\n\r\n//         return { userId: user.id };\r\n//     }\r\n// ).onUploadComplete(async ( {metadata, file } ) =>{\r\n//     console.log('upload completed for user id', metadata.userId);\r\n//     console.log('file url', file.url);\r\n    \r\n    \r\n//     return { userId: metadata.userId , file. };\r\n    \r\n// }),\r\n// } satisfies FileRouter;\r\n\r\n// export type OurFileRouter = typeof ourFileRouter;  \r\n\r\n\r\n\r\n\r\n// Chatgpt wala code hai yee error free h \r\n\r\nimport { currentUser } from \"@clerk/nextjs/server\";\r\nimport { UploadThingError } from \"uploadthing/server\";\r\nimport { createUploadthing, type FileRouter } from \"uploadthing/next\";\r\n\r\nconst f = createUploadthing();\r\n\r\nexport const ourFileRouter = {\r\n    pdfUploader: f({ pdf: { maxFileSize: '32MB' } })\r\n        .middleware(async ({ req }) => {\r\n            const user = await currentUser();\r\n            if (!user) throw new UploadThingError('Unauthorized');\r\n            return { userId: user.id };\r\n        })\r\n        .onUploadComplete(async ({ metadata, file }) => {\r\n            console.log('Upload completed for userId:', metadata.userId);\r\n            console.log('File URL:', file.ufsUrl);\r\n            \r\n            // Return only JSON-serializable data or nothing\r\n            return { \r\n                userId: metadata.userId,\r\n                fileUrl: file.ufsUrl,\r\n                fileKey: file.key,\r\n                fileName: file.name\r\n            };\r\n        }),\r\n} satisfies FileRouter;\r\n\r\nexport type OurFileRouter = typeof ourFileRouter;"],"names":[],"mappings":"AAAA,sDAAsD;AACtD,yDAAyD;AACzD,yEAAyE;AACzE,iCAAiC;AAEjC,iCAAiC;AACjC,sDAAsD;AACtD,mBAAmB;AACnB,iCAAiC;AACjC,6CAA6C;AAC7C,gDAAgD;AAChD,+CAA+C;AAC/C,+BAA+B;AAE/B,sCAAsC;AACtC,QAAQ;AACR,qDAAqD;AACrD,oEAAoE;AACpE,yCAAyC;AAGzC,kDAAkD;AAElD,MAAM;AACN,0BAA0B;AAE1B,sDAAsD;AAKtD,0CAA0C;;;;AAE1C;AACA;AACA;;;;AAEA,MAAM,IAAI,CAAA,GAAA,8JAAA,CAAA,oBAAiB,AAAD;AAEnB,MAAM,gBAAgB;IACzB,aAAa,EAAE;QAAE,KAAK;YAAE,aAAa;QAAO;IAAE,GACzC,UAAU,CAAC,OAAO,EAAE,GAAG,EAAE;QACtB,MAAM,OAAO,MAAM,CAAA,GAAA,4LAAA,CAAA,cAAW,AAAD;QAC7B,IAAI,CAAC,MAAM,MAAM,IAAI,0JAAA,CAAA,mBAAgB,CAAC;QACtC,OAAO;YAAE,QAAQ,KAAK,EAAE;QAAC;IAC7B,GACC,gBAAgB,CAAC,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE;QACvC,QAAQ,GAAG,CAAC,gCAAgC,SAAS,MAAM;QAC3D,QAAQ,GAAG,CAAC,aAAa,KAAK,MAAM;QAEpC,gDAAgD;QAChD,OAAO;YACH,QAAQ,SAAS,MAAM;YACvB,SAAS,KAAK,MAAM;YACpB,SAAS,KAAK,GAAG;YACjB,UAAU,KAAK,IAAI;QACvB;IACJ;AACR","debugId":null}},
    {"offset": {"line": 145, "column": 0}, "map": {"version":3,"sources":["file:///E:/Project%20That%20I%20Can%20Done%20nd%20Git%20Upl/summarized-app/app/api/uploadthing/route.ts"],"sourcesContent":["import { createRouteHandler } from \"uploadthing/next\";\r\n\r\nimport { ourFileRouter } from \"@/app/api//uploadthing/core\"; \r\n\r\nexport const {GET, POST} = createRouteHandler({\r\n    router: ourFileRouter,\r\n    // config \r\n});"],"names":[],"mappings":";;;;AAAA;AAEA;;;AAEO,MAAM,EAAC,GAAG,EAAE,IAAI,EAAC,GAAG,CAAA,GAAA,8JAAA,CAAA,qBAAkB,AAAD,EAAE;IAC1C,QAAQ,mIAAA,CAAA,gBAAa;AAEzB","debugId":null}}]
}