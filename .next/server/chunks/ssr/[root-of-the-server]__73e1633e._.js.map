{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///E:/Project%20That%20I%20Can%20Done%20nd%20Git%20Upl/summarized-app/utils/prompts.ts"],"sourcesContent":["export const SUMMARY_SYSTEM_PROMPT = `You are a social media content expert who turns complex documents into clear, engaging, and viral-style summaries using emojis and markdown formatting.\r\n\r\nYour task is to:\r\n- Extract the most important and valuable insights from the content.\r\n- Use an engaging and concise tone that's ideal for LinkedIn, Twitter, or Instagram carousel posts.\r\n- Format the response in **markdown**.\r\n- Use a bullet point (•) followed by a relevant **emoji** and a **space** at the start of every content line.\r\n- NEVER use numbered lists.\r\n\r\nFormatting Instructions:\r\n- All content sections must follow this structure:\r\n  \r\n  # [Create a Meaningful Title Based on the Document's Content]\r\n\r\n  • ✨ One sentence that summarizes the entire document  \r\n  • ➕ Additional key overview point (if needed)\r\n\r\n  # Document Details  \r\n  • 📄 Type: [Document Type]  \r\n  • 🧑‍💻 For: [Target Audience]\r\n\r\n  # Key Highlights  \r\n  • 🧠 First Key Point  \r\n  • 🔍 Second Key Point  \r\n  • 💡 Third Key Point\r\n\r\n  # Why It Matters  \r\n  • 🌍 A short paragraph or 1-liner explaining real-world impact\r\n\r\n  # Main Points  \r\n  • 📌 Main insight or finding  \r\n  • ✅ Key strength or advantage  \r\n  • 📊 Important outcome or result\r\n\r\n  # Pro Tips  \r\n  • 🛠 First practical recommendation  \r\n  • 💎 Second valuable insight  \r\n  • 🚀 Third actionable advice\r\n\r\n  # Key Terms to Know  \r\n  • 🧾 First key Term : Simple explanation  \r\n  • 🧾  Second key Term : Simple explanation\r\n\r\n  # Bottom Line  \r\n  • 📌 Most important takeaway\r\n\r\nNotes:\r\n• Every single line must start with \"• \" followed by an emoji and a space.  \r\n• Do NOT use numbered or unordered lists from markdown.  \r\n• Always maintain this exact  format for All points in ALL sections.\r\n\r\nExample:\r\n• ✨ This is how every point should look  \r\n• 🔥 This is another valid point\r\n\r\nNever deviate from this format. Every line that contains content must start with \" • \" followed by an [emoji].`;\r\n"],"names":[],"mappings":";;;AAAO,MAAM,wBAAwB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8GAuDwE,CAAC","debugId":null}},
    {"offset": {"line": 72, "column": 0}, "map": {"version":3,"sources":["file:///E:/Project%20That%20I%20Can%20Done%20nd%20Git%20Upl/summarized-app/lib/geminiai.ts"],"sourcesContent":["import { GoogleGenerativeAI } from \"@google/generative-ai\";\r\nimport { SUMMARY_SYSTEM_PROMPT } from \"@/utils/prompts\";\r\nimport { text } from \"stream/consumers\";\r\n\r\n\r\n\r\nconst genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY || '');\r\n\r\nexport const generateSummaryFromGemini = async (pdfText: string) => {\r\n    try {\r\n        const model = genAI.getGenerativeModel({\r\n            model: 'gemini-1.5-flash-8b', generationConfig: {\r\n                temperature: 0.7,\r\n                maxOutputTokens: 1500,\r\n            },\r\n        });\r\n        const prompt = {\r\n            contents: [\r\n                {\r\n                    role: 'user',\r\n                    parts: [\r\n                        {\r\n                            text:\r\n                                SUMMARY_SYSTEM_PROMPT\r\n                        }, {\r\n                            text: `Transform this document into an engaging, easy-to-read summary with contextually relevant emojis and proper markdown formatting:\\n\\n${pdfText}`,\r\n                        },\r\n                    ],\r\n                },\r\n            ],\r\n        };\r\n        const result = await model.generateContent(prompt);\r\n        const response = await result.response;\r\n        if(!response.text()){\r\n            throw new Error('Empty response from gemini Api')\r\n        }\r\n\r\n\r\n        return response.text();\r\n    } catch (error: any) {\r\n        console.error('Gemini API Error:', error);\r\n        throw error;\r\n\r\n    }\r\n}"],"names":[],"mappings":";;;AAAA;AACA;;;AAKA,MAAM,QAAQ,IAAI,8JAAA,CAAA,qBAAkB,CAAC,QAAQ,GAAG,CAAC,cAAc,IAAI;AAE5D,MAAM,4BAA4B,OAAO;IAC5C,IAAI;QACA,MAAM,QAAQ,MAAM,kBAAkB,CAAC;YACnC,OAAO;YAAuB,kBAAkB;gBAC5C,aAAa;gBACb,iBAAiB;YACrB;QACJ;QACA,MAAM,SAAS;YACX,UAAU;gBACN;oBACI,MAAM;oBACN,OAAO;wBACH;4BACI,MACI,gHAAA,CAAA,wBAAqB;wBAC7B;wBAAG;4BACC,MAAM,CAAC,oIAAoI,EAAE,SAAS;wBAC1J;qBACH;gBACL;aACH;QACL;QACA,MAAM,SAAS,MAAM,MAAM,eAAe,CAAC;QAC3C,MAAM,WAAW,MAAM,OAAO,QAAQ;QACtC,IAAG,CAAC,SAAS,IAAI,IAAG;YAChB,MAAM,IAAI,MAAM;QACpB;QAGA,OAAO,SAAS,IAAI;IACxB,EAAE,OAAO,OAAY;QACjB,QAAQ,KAAK,CAAC,qBAAqB;QACnC,MAAM;IAEV;AACJ","debugId":null}},
    {"offset": {"line": 121, "column": 0}, "map": {"version":3,"sources":["file:///E:/Project%20That%20I%20Can%20Done%20nd%20Git%20Upl/summarized-app/lib/langchain.ts"],"sourcesContent":["import { WebPDFLoader } from \"@langchain/community/document_loaders/web/pdf\";\r\n\r\nexport async function fetchAndExtractPdfText(fileUrl:string) {\r\n    const response = await fetch(fileUrl);\r\n    const blob = await response.blob();\r\n\r\n    const arrayBuffer = await blob.arrayBuffer();\r\n\r\n    const loader = new WebPDFLoader(new Blob([arrayBuffer]));\r\n\r\n    const docs = await loader.load();\r\n\r\n    return docs.map((doc) => doc.pageContent).join('\\n');\r\n} "],"names":[],"mappings":";;;AAAA;AAAA;;AAEO,eAAe,uBAAuB,OAAc;IACvD,MAAM,WAAW,MAAM,MAAM;IAC7B,MAAM,OAAO,MAAM,SAAS,IAAI;IAEhC,MAAM,cAAc,MAAM,KAAK,WAAW;IAE1C,MAAM,SAAS,IAAI,kLAAA,CAAA,eAAY,CAAC,IAAI,KAAK;QAAC;KAAY;IAEtD,MAAM,OAAO,MAAM,OAAO,IAAI;IAE9B,OAAO,KAAK,GAAG,CAAC,CAAC,MAAQ,IAAI,WAAW,EAAE,IAAI,CAAC;AACnD","debugId":null}},
    {"offset": {"line": 215, "column": 0}, "map": {"version":3,"sources":["file:///E:/Project%20That%20I%20Can%20Done%20nd%20Git%20Upl/summarized-app/lib/openai.ts"],"sourcesContent":["import { SUMMARY_SYSTEM_PROMPT } from \"@/utils/prompts\";\r\nimport OpenAI from \"openai\";\r\nconst client = new OpenAI({\r\n    apiKey: process.env.OPENAI_API_KEY,\r\n});\r\n\r\nexport async function generateSummaryFromOpenAI(pdfText: string) {\r\n    try {\r\n        const completion = await client.chat.completions.create({\r\n            model: \"gpt-4.1\",\r\n            messages: [\r\n                {\r\n                    role: \"system\",\r\n                    content: SUMMARY_SYSTEM_PROMPT\r\n                },\r\n                {\r\n                    role: \"user\",\r\n                    content: `Transform this document into an engaging, easy-to-read summary with contextually relevant emojis and proper markdown formatting:\\n\\n${pdfText}`,\r\n                },\r\n            ],\r\n            temperature: 0.7,\r\n            max_tokens: 1500,\r\n        });\r\n        return completion.choices[0].message.content;\r\n    } catch(error:any){\r\n            if(error?.status === 429){\r\n                throw new Error('RATE_LIMIT_EXCEEDED')\r\n            }\r\n            throw error;\r\n\r\n    }\r\n  \r\n\r\n}\r\n\r\n\r\n\r\n// console.log(response.output_text);"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,SAAS,IAAI,gJAAA,CAAA,UAAM,CAAC;IACtB,QAAQ,QAAQ,GAAG,CAAC,cAAc;AACtC;AAEO,eAAe,0BAA0B,OAAe;IAC3D,IAAI;QACA,MAAM,aAAa,MAAM,OAAO,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC;YACpD,OAAO;YACP,UAAU;gBACN;oBACI,MAAM;oBACN,SAAS,gHAAA,CAAA,wBAAqB;gBAClC;gBACA;oBACI,MAAM;oBACN,SAAS,CAAC,oIAAoI,EAAE,SAAS;gBAC7J;aACH;YACD,aAAa;YACb,YAAY;QAChB;QACA,OAAO,WAAW,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,OAAO;IAChD,EAAE,OAAM,OAAU;QACV,IAAG,OAAO,WAAW,KAAI;YACrB,MAAM,IAAI,MAAM;QACpB;QACA,MAAM;IAEd;AAGJ,EAIA,qCAAqC","debugId":null}},
    {"offset": {"line": 256, "column": 0}, "map": {"version":3,"sources":["file:///E:/Project%20That%20I%20Can%20Done%20nd%20Git%20Upl/summarized-app/actions/upload-action.ts"],"sourcesContent":["// 'use server'\r\n\r\n// import { generateSummaryFromGemini } from \"@/lib/geminiai\";\r\n// import { fetchAndExtractPdfText } from \"@/lib/langchain\";\r\n// import { generateSummaryFromOpenAI } from \"@/lib/openai\";\r\n// import { error } from \"console\";\r\n// import { _success } from \"zod/v4/core\";\r\n// import { tr } from \"zod/v4/locales\";\r\n\r\n// export async function generatePDFSummary(uploadResponse: [{\r\n//     serverData: {\r\n//         userId: string;\r\n//         file: {\r\n//             url: string;\r\n//             name: string;\r\n//         };\r\n//     };\r\n// }]) {\r\n//     if (!uploadResponse) {\r\n//         return {\r\n//             success: false,\r\n//             message: \"File  Upload Failed\",\r\n//             data: null,\r\n//         };\r\n//     }\r\n//     const { serverData: {\r\n//         userId, file: { url: pdfUrl, name: fileName },\r\n//     },\r\n//     } = uploadResponse[0];\r\n\r\n//     if (!pdfUrl) {\r\n//         return {\r\n//             success: false,\r\n//             message: \"File  Upload Failed\",\r\n//             data: null,\r\n//         };\r\n//     }\r\n//     try {\r\n//         const pdfText = await fetchAndExtractPdfText(pdfUrl);\r\n//         console.log({pdfText});\r\n\r\n//         let summary;\r\n//         try {\r\n//              summary = await generateSummaryFromOpenAI(pdfText);\r\n//             console.log({summary});\r\n//         } catch(error){\r\n//             console.log(error); \r\n//             // call geminii Code \r\n//             if(error instanceof Error && error.message === 'RATE_LIMIT_EXCEEDED')\r\n//             {\r\n//                 try{\r\n//                     summary = await generateSummaryFromGemini  \r\n//                     (pdfText);\r\n\r\n//             }catch(geminiError){\r\n//                 console.error(\r\n//                     'Gemini API Failed after the OpenAI quota exceeded',\r\n//                     geminiError\r\n//                 );\r\n//                 throw new Error('Failed to generate Summary with available AI providers')\r\n                \r\n//             }\r\n//             }\r\n//         }\r\n//         if(!summary){\r\n//             return{\r\n//             success: false,\r\n//             message: \"Failed to generate Summary\",\r\n//             data: null,\r\n    \r\n//             }\r\n//         }\r\n//  return{\r\n//             success: true,\r\n//             message: \"Summary Generated SuccesFully!\",\r\n//             data: {\r\n//                 summary,    \r\n//             } ,\r\n//     }\r\n//     } catch (err) {\r\n//         return {\r\n//             success: false,\r\n//             message: \"File  Upload Failed\",\r\n//             data: null,\r\n//         };\r\n//     }\r\n\r\n\r\n\r\n\r\n// }\r\n// pahele wala code h error wala\r\n\r\n/////////////////////////////////////////////////////////////////////////////////////////////////\r\n// new code hai deepseek kaa \r\n\r\n\r\n// 'use server'\r\n\r\n// import { generateSummaryFromGemini } from \"@/lib/geminiai\";\r\n// import { fetchAndExtractPdfText } from \"@/lib/langchain\";\r\n// import { generateSummaryFromOpenAI } from \"@/lib/openai\";\r\n\r\n// export async function generatePDFSummary(uploadResponse: [{\r\n//     serverData: {\r\n//         userId: string;\r\n//         file: {\r\n//             url: string;\r\n//             name: string;\r\n//         };\r\n//     };\r\n// }]) {\r\n//     if (!uploadResponse) {\r\n//         return {\r\n//             success: false,\r\n//             message: \"File Upload Failed\",\r\n//             data: null,\r\n//         };\r\n//     }\r\n    \r\n//     const { serverData: {\r\n//         userId, file: { url: pdfUrl, name: fileName },\r\n//     },\r\n//     } = uploadResponse[0];\r\n\r\n//     if (!pdfUrl) {\r\n//         return {\r\n//             success: false,\r\n//             message: \"File Upload Failed\",\r\n//             data: null,\r\n//         };\r\n//     }\r\n    \r\n//     try {\r\n//         const pdfText = await fetchAndExtractPdfText(pdfUrl);\r\n//         console.log({pdfText});\r\n\r\n//         let summary;\r\n//         try {\r\n//             summary = await generateSummaryFromOpenAI(pdfText);\r\n//             console.log({summary});\r\n//         } catch(error) {\r\n//             console.log(error); \r\n//             // call gemini if OpenAI rate limit exceeded\r\n//             if(error instanceof Error && error.message === 'RATE_LIMIT_EXCEEDED') {\r\n//                 try {\r\n//                     summary = await generateSummaryFromGemini(pdfText);\r\n//                     console.log({summary});\r\n//                 } catch(geminiError) {\r\n//                     console.error(\r\n//                         'Gemini API Failed after the OpenAI quota exceeded',\r\n//                         geminiError\r\n//                     );\r\n//                     return {\r\n//                         success: false,\r\n//                         message: \"Failed to generate Summary with available AI providers\",\r\n//                         data: null,\r\n//                     };\r\n//                 }\r\n//             } else {\r\n//                 // If it's not a rate limit error, rethrow\r\n//                 throw error;\r\n//             }\r\n//         }\r\n\r\n//         if(!summary) {\r\n//             return {\r\n//                 success: false,\r\n//                 message: \"Failed to generate Summary\",\r\n//                 data: null,\r\n//             };\r\n//         }\r\n\r\n//         return {\r\n//             success: true,\r\n//             message: \"Summary Generated Successfully!\",\r\n//             data: {\r\n//                 summary,    \r\n//             },\r\n//         };\r\n//     } catch (err) {\r\n//         console.error(\"Error in generatePDFSummary:\", err);\r\n//         return {\r\n//             success: false,\r\n//             message: \"Failed to process PDF\",\r\n//             data: null,\r\n//         };\r\n//     }\r\n// }\r\n\r\n\r\n\r\n\r\n'use server'\r\n\r\nimport { generateSummaryFromGemini } from \"@/lib/geminiai\";\r\nimport { fetchAndExtractPdfText } from \"@/lib/langchain\";\r\nimport { generateSummaryFromOpenAI } from \"@/lib/openai\";\r\n\r\nexport async function generatePDFSummary(uploadResponse: [{\r\n    serverData: {\r\n        userId: string;\r\n        file: {\r\n            url: string;\r\n            name: string;\r\n        };\r\n    };\r\n}]) {\r\n    if (!uploadResponse) {\r\n        return {\r\n            success: false,\r\n            message: \"File Upload Failed\",\r\n            data: null,\r\n        };\r\n    }\r\n    \r\n    const { serverData: {\r\n        userId, file: { url: pdfUrl, name: fileName },\r\n    },\r\n    } = uploadResponse[0];\r\n\r\n    if (!pdfUrl) {\r\n        return {\r\n            success: false,\r\n            message: \"File Upload Failed\",\r\n            data: null,\r\n        };\r\n    }\r\n    \r\n    try {\r\n        const pdfText = await fetchAndExtractPdfText(pdfUrl);\r\n        console.log(\"Extracted PDF text:\", {pdfText});\r\n\r\n        let summary;\r\n        let provider = 'Unknown';\r\n        \r\n        try {\r\n            summary = await generateSummaryFromOpenAI(pdfText);\r\n            provider = 'OpenAI';\r\n        } catch(error) {\r\n            console.log(\"OpenAI Error:\", error); \r\n            \r\n            if(error instanceof Error && error.message === 'RATE_LIMIT_EXCEEDED') {\r\n                try {\r\n                    summary = await generateSummaryFromGemini(pdfText);\r\n                    provider = 'Gemini';\r\n                } catch(geminiError) {\r\n                    console.error(\r\n                        'Gemini API Failed after the OpenAI quota exceeded',\r\n                        geminiError\r\n                    );\r\n                    return {\r\n                        success: false,\r\n                        message: \"Failed to generate Summary with available AI providers\",\r\n                        data: null,\r\n                    };\r\n                }\r\n            } else {\r\n                throw error;\r\n            }\r\n        }\r\n\r\n        if(!summary) {\r\n            return {\r\n                success: false,\r\n                message: \"Failed to generate Summary\",\r\n                data: null,\r\n            };\r\n        }\r\n\r\n        // Add provider information to the summary\r\n        const annotatedSummary = `This summary was generated by ${provider}:\\n\\n${summary}`;\r\n        \r\n        console.log(`Summary generated by ${provider}:`, {summary});\r\n\r\n        return {\r\n            success: true,\r\n            message: \"Summary Generated Successfully!\",\r\n            data: {\r\n                summary: annotatedSummary,\r\n                provider, // Still including the provider separately if needed\r\n            },\r\n        };\r\n    } catch (err) {\r\n        console.error(\"Error in generatePDFSummary:\", err);\r\n        return {\r\n            success: false,\r\n            message: \"Failed to process PDF\",\r\n            data: null,\r\n        };\r\n    }\r\n}"],"names":[],"mappings":"AAAA,eAAe;AAEf,8DAA8D;AAC9D,4DAA4D;AAC5D,4DAA4D;AAC5D,mCAAmC;AACnC,0CAA0C;AAC1C,uCAAuC;AAEvC,8DAA8D;AAC9D,oBAAoB;AACpB,0BAA0B;AAC1B,kBAAkB;AAClB,2BAA2B;AAC3B,4BAA4B;AAC5B,aAAa;AACb,SAAS;AACT,QAAQ;AACR,6BAA6B;AAC7B,mBAAmB;AACnB,8BAA8B;AAC9B,8CAA8C;AAC9C,0BAA0B;AAC1B,aAAa;AACb,QAAQ;AACR,4BAA4B;AAC5B,yDAAyD;AACzD,SAAS;AACT,6BAA6B;AAE7B,qBAAqB;AACrB,mBAAmB;AACnB,8BAA8B;AAC9B,8CAA8C;AAC9C,0BAA0B;AAC1B,aAAa;AACb,QAAQ;AACR,YAAY;AACZ,gEAAgE;AAChE,kCAAkC;AAElC,uBAAuB;AACvB,gBAAgB;AAChB,mEAAmE;AACnE,sCAAsC;AACtC,0BAA0B;AAC1B,mCAAmC;AACnC,oCAAoC;AACpC,oFAAoF;AACpF,gBAAgB;AAChB,uBAAuB;AACvB,kEAAkE;AAClE,iCAAiC;AAEjC,mCAAmC;AACnC,iCAAiC;AACjC,2EAA2E;AAC3E,kCAAkC;AAClC,qBAAqB;AACrB,4FAA4F;AAE5F,gBAAgB;AAChB,gBAAgB;AAChB,YAAY;AACZ,wBAAwB;AACxB,sBAAsB;AACtB,8BAA8B;AAC9B,qDAAqD;AACrD,0BAA0B;AAE1B,gBAAgB;AAChB,YAAY;AACZ,WAAW;AACX,6BAA6B;AAC7B,yDAAyD;AACzD,sBAAsB;AACtB,+BAA+B;AAC/B,kBAAkB;AAClB,QAAQ;AACR,sBAAsB;AACtB,mBAAmB;AACnB,8BAA8B;AAC9B,8CAA8C;AAC9C,0BAA0B;AAC1B,aAAa;AACb,QAAQ;AAKR,IAAI;AACJ,gCAAgC;AAEhC,iGAAiG;AACjG,6BAA6B;AAG7B,eAAe;AAEf,8DAA8D;AAC9D,4DAA4D;AAC5D,4DAA4D;AAE5D,8DAA8D;AAC9D,oBAAoB;AACpB,0BAA0B;AAC1B,kBAAkB;AAClB,2BAA2B;AAC3B,4BAA4B;AAC5B,aAAa;AACb,SAAS;AACT,QAAQ;AACR,6BAA6B;AAC7B,mBAAmB;AACnB,8BAA8B;AAC9B,6CAA6C;AAC7C,0BAA0B;AAC1B,aAAa;AACb,QAAQ;AAER,4BAA4B;AAC5B,yDAAyD;AACzD,SAAS;AACT,6BAA6B;AAE7B,qBAAqB;AACrB,mBAAmB;AACnB,8BAA8B;AAC9B,6CAA6C;AAC7C,0BAA0B;AAC1B,aAAa;AACb,QAAQ;AAER,YAAY;AACZ,gEAAgE;AAChE,kCAAkC;AAElC,uBAAuB;AACvB,gBAAgB;AAChB,kEAAkE;AAClE,sCAAsC;AACtC,2BAA2B;AAC3B,mCAAmC;AACnC,2DAA2D;AAC3D,sFAAsF;AACtF,wBAAwB;AACxB,0EAA0E;AAC1E,8CAA8C;AAC9C,yCAAyC;AACzC,qCAAqC;AACrC,+EAA+E;AAC/E,sCAAsC;AACtC,yBAAyB;AACzB,+BAA+B;AAC/B,0CAA0C;AAC1C,6FAA6F;AAC7F,sCAAsC;AACtC,yBAAyB;AACzB,oBAAoB;AACpB,uBAAuB;AACvB,6DAA6D;AAC7D,+BAA+B;AAC/B,gBAAgB;AAChB,YAAY;AAEZ,yBAAyB;AACzB,uBAAuB;AACvB,kCAAkC;AAClC,yDAAyD;AACzD,8BAA8B;AAC9B,iBAAiB;AACjB,YAAY;AAEZ,mBAAmB;AACnB,6BAA6B;AAC7B,0DAA0D;AAC1D,sBAAsB;AACtB,+BAA+B;AAC/B,iBAAiB;AACjB,aAAa;AACb,sBAAsB;AACtB,8DAA8D;AAC9D,mBAAmB;AACnB,8BAA8B;AAC9B,gDAAgD;AAChD,0BAA0B;AAC1B,aAAa;AACb,QAAQ;AACR,IAAI;;;;;;AAOJ;AACA;AACA;;;;;;;AAEO,eAAe,mBAAmB,cAQvC;IACE,IAAI,CAAC,gBAAgB;QACjB,OAAO;YACH,SAAS;YACT,SAAS;YACT,MAAM;QACV;IACJ;IAEA,MAAM,EAAE,YAAY,EAChB,MAAM,EAAE,MAAM,EAAE,KAAK,MAAM,EAAE,MAAM,QAAQ,EAAE,EAChD,EACA,GAAG,cAAc,CAAC,EAAE;IAErB,IAAI,CAAC,QAAQ;QACT,OAAO;YACH,SAAS;YACT,SAAS;YACT,MAAM;QACV;IACJ;IAEA,IAAI;QACA,MAAM,UAAU,MAAM,CAAA,GAAA,gHAAA,CAAA,yBAAsB,AAAD,EAAE;QAC7C,QAAQ,GAAG,CAAC,uBAAuB;YAAC;QAAO;QAE3C,IAAI;QACJ,IAAI,WAAW;QAEf,IAAI;YACA,UAAU,MAAM,CAAA,GAAA,6GAAA,CAAA,4BAAyB,AAAD,EAAE;YAC1C,WAAW;QACf,EAAE,OAAM,OAAO;YACX,QAAQ,GAAG,CAAC,iBAAiB;YAE7B,IAAG,iBAAiB,SAAS,MAAM,OAAO,KAAK,uBAAuB;gBAClE,IAAI;oBACA,UAAU,MAAM,CAAA,GAAA,+GAAA,CAAA,4BAAyB,AAAD,EAAE;oBAC1C,WAAW;gBACf,EAAE,OAAM,aAAa;oBACjB,QAAQ,KAAK,CACT,qDACA;oBAEJ,OAAO;wBACH,SAAS;wBACT,SAAS;wBACT,MAAM;oBACV;gBACJ;YACJ,OAAO;gBACH,MAAM;YACV;QACJ;QAEA,IAAG,CAAC,SAAS;YACT,OAAO;gBACH,SAAS;gBACT,SAAS;gBACT,MAAM;YACV;QACJ;QAEA,0CAA0C;QAC1C,MAAM,mBAAmB,CAAC,8BAA8B,EAAE,SAAS,KAAK,EAAE,SAAS;QAEnF,QAAQ,GAAG,CAAC,CAAC,qBAAqB,EAAE,SAAS,CAAC,CAAC,EAAE;YAAC;QAAO;QAEzD,OAAO;YACH,SAAS;YACT,SAAS;YACT,MAAM;gBACF,SAAS;gBACT;YACJ;QACJ;IACJ,EAAE,OAAO,KAAK;QACV,QAAQ,KAAK,CAAC,gCAAgC;QAC9C,OAAO;YACH,SAAS;YACT,SAAS;YACT,MAAM;QACV;IACJ;AACJ;;;IA5FsB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 533, "column": 0}, "map": {"version":3,"sources":["file:///E:/Project%20That%20I%20Can%20Done%20nd%20Git%20Upl/summarized-app/lib/utils.ts"],"sourcesContent":["import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,SAAS,GAAG,GAAG,MAAoB;IACxC,OAAO,CAAA,GAAA,2JAAA,CAAA,UAAO,AAAD,EAAE,CAAA,GAAA,qIAAA,CAAA,OAAI,AAAD,EAAE;AACtB","debugId":null}},
    {"offset": {"line": 549, "column": 0}, "map": {"version":3,"sources":["file:///E:/Project%20That%20I%20Can%20Done%20nd%20Git%20Upl/summarized-app/components/common/bg-gradient.tsx"],"sourcesContent":["import { cn } from \"@/lib/utils\";\r\n\r\nexport default function BgGradient({\r\n    className,\r\n}: {\r\n    \r\n    className?: string;\r\n}) {\r\n    return (\r\n            <div\r\n                aria-hidden=\"true\"\r\n                className=\"pointer-events-none absolute inset-x-0 -top-40\r\n            -z-10 transform-gpu overflow-hidden blur-3xl sm:-top-30\"\r\n            >\r\n                <div style={{\r\n                    clipPath:\r\n                        'polygon(50% 0%, 61% 35%, 98% 35%, 68% 57%, 79% 91%, 50% 70%, 21% 91%, 32% 57%, 2% 35%, 39% 35%)'\r\n                }}\r\n                    className={cn(\"relative left-[calc(50%-11rem)] aspect-1155/678 w-[36,125rem] -translate-x-1/2 rotate-[30deg] bg-linear-to-r from-emerald-500 via-teal-500 to-cyan-500 opacity-20 sm:left-[calc(50%-30rem)] sm:w-[72rem]\",className)}\r\n\r\n                />\r\n            </div>\r\n        \r\n\r\n\r\n    );\r\n}"],"names":[],"mappings":";;;;AAAA;;;AAEe,SAAS,WAAW,EAC/B,SAAS,EAIZ;IACG,qBACQ,8OAAC;QACG,eAAY;QACZ,WAAU;kBAGV,cAAA,8OAAC;YAAI,OAAO;gBACR,UACI;YACR;YACI,WAAW,CAAA,GAAA,4GAAA,CAAA,KAAE,AAAD,EAAE,4MAA2M;;;;;;;;;;;AAQ7O","debugId":null}},
    {"offset": {"line": 582, "column": 0}, "map": {"version":3,"sources":["file:///E:/Project%20That%20I%20Can%20Done%20nd%20Git%20Upl/summarized-app/components/ui/badge.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground [a&]:hover:bg-primary/90\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90\",\n        destructive:\n          \"border-transparent bg-destructive text-white [a&]:hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\n        outline:\n          \"text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nfunction Badge({\n  className,\n  variant,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"span\"> &\n  VariantProps<typeof badgeVariants> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"span\"\n\n  return (\n    <Comp\n      data-slot=\"badge\"\n      className={cn(badgeVariants({ variant }), className)}\n      {...props}\n    />\n  )\n}\n\nexport { Badge, badgeVariants }\n"],"names":[],"mappings":";;;;;AACA;AACA;AAEA;;;;;AAEA,MAAM,gBAAgB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACtB,kZACA;IACE,UAAU;QACR,SAAS;YACP,SACE;YACF,WACE;YACF,aACE;YACF,SACE;QACJ;IACF;IACA,iBAAiB;QACf,SAAS;IACX;AACF;AAGF,SAAS,MAAM,EACb,SAAS,EACT,OAAO,EACP,UAAU,KAAK,EACf,GAAG,OAEuD;IAC1D,MAAM,OAAO,UAAU,gKAAA,CAAA,OAAI,GAAG;IAE9B,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,4GAAA,CAAA,KAAE,AAAD,EAAE,cAAc;YAAE;QAAQ,IAAI;QACzC,GAAG,KAAK;;;;;;AAGf","debugId":null}},
    {"offset": {"line": 628, "column": 0}, "map": {"version":3,"sources":["file:///E:/Project%20That%20I%20Can%20Done%20nd%20Git%20Upl/summarized-app/components/upload/upload-header.tsx"],"sourcesContent":["import { Sparkles } from \"lucide-react\";\r\nimport { Badge } from \"../ui/badge\";\r\n\r\nexport default function UploadHeader(){\r\n    return  <div className=\"flex flex-col items-center justify-center gap-6 text-center\">\r\n                    <div className=\"relative p-[1px] overflow-hidden rounded-full bg-gradient-to-r from-rose-200 via-rose-500 to-rose-800 animate-gradient-x group\">\r\n                        <Badge\r\n                            variant={'secondary'}\r\n                            className=\"relative px-6 py-2 text-base font-medium bg-white rounded-full group-hover:bg-gray-100 transition-colors\"\r\n                        >\r\n                            <Sparkles className=\"h-6 w-6 mr-2 text-red-600 animate-pulse\" />\r\n                            <p>AI Powered Content Creation</p>\r\n                        </Badge>\r\n                    </div>\r\n                    <div className=\"capitalized text-3xl font-bold tracking-tight text-gray-900 sm:text-4xl\">\r\n                        Start Uploading {' '}\r\n                        <span className=\"relative inline-block\">\r\n                            <span className=\"relative z-10 px-2\">Your PDF's</span>\r\n                            <span className=\"absolute inset-0 bg-rose-200/50 -rotate-2 rounded-lg transform -skew-y-1\" aria-hidden=\"true\"></span>\r\n                        </span>{' '}\r\n                    </div>\r\n                    <div className=\"mt-2 text-lg leading-8 text-gray-600 max-w-2xl text-center\">\r\n                        <p>Upload your PDF and let our AI do the magic! ✨</p>\r\n                    </div>\r\n                </div>\r\n}"],"names":[],"mappings":";;;;AAAA;AACA;;;;AAEe,SAAS;IACpB,qBAAQ,8OAAC;QAAI,WAAU;;0BACP,8OAAC;gBAAI,WAAU;0BACX,cAAA,8OAAC,0HAAA,CAAA,QAAK;oBACF,SAAS;oBACT,WAAU;;sCAEV,8OAAC,0MAAA,CAAA,WAAQ;4BAAC,WAAU;;;;;;sCACpB,8OAAC;sCAAE;;;;;;;;;;;;;;;;;0BAGX,8OAAC;gBAAI,WAAU;;oBAA0E;oBACpE;kCACjB,8OAAC;wBAAK,WAAU;;0CACZ,8OAAC;gCAAK,WAAU;0CAAqB;;;;;;0CACrC,8OAAC;gCAAK,WAAU;gCAA2E,eAAY;;;;;;;;;;;;oBACnG;;;;;;;0BAEZ,8OAAC;gBAAI,WAAU;0BACX,cAAA,8OAAC;8BAAE;;;;;;;;;;;;;;;;;AAG3B","debugId":null}},
    {"offset": {"line": 736, "column": 0}, "map": {"version":3,"sources":["file:///E:/Project%20That%20I%20Can%20Done%20nd%20Git%20Upl/summarized-app/components/upload/upload-form.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/components/upload/upload-form.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/components/upload/upload-form.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAqS,GAClU,mEACA","debugId":null}},
    {"offset": {"line": 750, "column": 0}, "map": {"version":3,"sources":["file:///E:/Project%20That%20I%20Can%20Done%20nd%20Git%20Upl/summarized-app/components/upload/upload-form.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/components/upload/upload-form.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/components/upload/upload-form.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAiR,GAC9S,+CACA","debugId":null}},
    {"offset": {"line": 764, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 774, "column": 0}, "map": {"version":3,"sources":["file:///E:/Project%20That%20I%20Can%20Done%20nd%20Git%20Upl/summarized-app/app/%28logged-in%29/upload/page.tsx"],"sourcesContent":["import BgGradient from \"@/components/common/bg-gradient\"\r\nimport UploadHeader from \"@/components/upload/upload-header\"\r\nimport UploadForm from \"@/components/upload/upload-form\"\r\nexport default function Page() {\r\n    return <section className=\"min-h-screen\">\r\n        <BgGradient />\r\n        <div className=\"mx-auto  max-w-7xl px-6 py-24 sm:py-32 lg:px-8\">\r\n           <div className=\"flex flex-col items-center justify-center gap-6 text-center\">\r\n           <UploadHeader />\r\n           <UploadForm />\r\n           </div>\r\n        </div>\r\n    </section>\r\n}"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;;AACe,SAAS;IACpB,qBAAO,8OAAC;QAAQ,WAAU;;0BACtB,8OAAC,uIAAA,CAAA,UAAU;;;;;0BACX,8OAAC;gBAAI,WAAU;0BACZ,cAAA,8OAAC;oBAAI,WAAU;;sCACf,8OAAC,yIAAA,CAAA,UAAY;;;;;sCACb,8OAAC,uIAAA,CAAA,UAAU;;;;;;;;;;;;;;;;;;;;;;AAItB","debugId":null}}]
}