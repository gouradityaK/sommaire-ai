{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///E:/Project%20That%20I%20Can%20Done%20nd%20Git%20Upl/summarized-app/actions/upload-action.ts"],"sourcesContent":["// 'use server'\r\n\r\n// import { generateSummaryFromGemini } from \"@/lib/geminiai\";\r\n// import { fetchAndExtractPdfText } from \"@/lib/langchain\";\r\n// import { generateSummaryFromOpenAI } from \"@/lib/openai\";\r\n// import { error } from \"console\";\r\n// import { _success } from \"zod/v4/core\";\r\n// import { tr } from \"zod/v4/locales\";\r\n\r\n// export async function generatePDFSummary(uploadResponse: [{\r\n//     serverData: {\r\n//         userId: string;\r\n//         file: {\r\n//             url: string;\r\n//             name: string;\r\n//         };\r\n//     };\r\n// }]) {\r\n//     if (!uploadResponse) {\r\n//         return {\r\n//             success: false,\r\n//             message: \"File  Upload Failed\",\r\n//             data: null,\r\n//         };\r\n//     }\r\n//     const { serverData: {\r\n//         userId, file: { url: pdfUrl, name: fileName },\r\n//     },\r\n//     } = uploadResponse[0];\r\n\r\n//     if (!pdfUrl) {\r\n//         return {\r\n//             success: false,\r\n//             message: \"File  Upload Failed\",\r\n//             data: null,\r\n//         };\r\n//     }\r\n//     try {\r\n//         const pdfText = await fetchAndExtractPdfText(pdfUrl);\r\n//         console.log({pdfText});\r\n\r\n//         let summary;\r\n//         try {\r\n//              summary = await generateSummaryFromOpenAI(pdfText);\r\n//             console.log({summary});\r\n//         } catch(error){\r\n//             console.log(error); \r\n//             // call geminii Code \r\n//             if(error instanceof Error && error.message === 'RATE_LIMIT_EXCEEDED')\r\n//             {\r\n//                 try{\r\n//                     summary = await generateSummaryFromGemini  \r\n//                     (pdfText);\r\n\r\n//             }catch(geminiError){\r\n//                 console.error(\r\n//                     'Gemini API Failed after the OpenAI quota exceeded',\r\n//                     geminiError\r\n//                 );\r\n//                 throw new Error('Failed to generate Summary with available AI providers')\r\n                \r\n//             }\r\n//             }\r\n//         }\r\n//         if(!summary){\r\n//             return{\r\n//             success: false,\r\n//             message: \"Failed to generate Summary\",\r\n//             data: null,\r\n    \r\n//             }\r\n//         }\r\n//  return{\r\n//             success: true,\r\n//             message: \"Summary Generated SuccesFully!\",\r\n//             data: {\r\n//                 summary,    \r\n//             } ,\r\n//     }\r\n//     } catch (err) {\r\n//         return {\r\n//             success: false,\r\n//             message: \"File  Upload Failed\",\r\n//             data: null,\r\n//         };\r\n//     }\r\n\r\n\r\n\r\n\r\n// }\r\n// pahele wala code h error wala\r\n\r\n/////////////////////////////////////////////////////////////////////////////////////////////////\r\n// new code hai deepseek kaa \r\n\r\n\r\n// 'use server'\r\n\r\n// import { generateSummaryFromGemini } from \"@/lib/geminiai\";\r\n// import { fetchAndExtractPdfText } from \"@/lib/langchain\";\r\n// import { generateSummaryFromOpenAI } from \"@/lib/openai\";\r\n\r\n// export async function generatePDFSummary(uploadResponse: [{\r\n//     serverData: {\r\n//         userId: string;\r\n//         file: {\r\n//             url: string;\r\n//             name: string;\r\n//         };\r\n//     };\r\n// }]) {\r\n//     if (!uploadResponse) {\r\n//         return {\r\n//             success: false,\r\n//             message: \"File Upload Failed\",\r\n//             data: null,\r\n//         };\r\n//     }\r\n    \r\n//     const { serverData: {\r\n//         userId, file: { url: pdfUrl, name: fileName },\r\n//     },\r\n//     } = uploadResponse[0];\r\n\r\n//     if (!pdfUrl) {\r\n//         return {\r\n//             success: false,\r\n//             message: \"File Upload Failed\",\r\n//             data: null,\r\n//         };\r\n//     }\r\n    \r\n//     try {\r\n//         const pdfText = await fetchAndExtractPdfText(pdfUrl);\r\n//         console.log({pdfText});\r\n\r\n//         let summary;\r\n//         try {\r\n//             summary = await generateSummaryFromOpenAI(pdfText);\r\n//             console.log({summary});\r\n//         } catch(error) {\r\n//             console.log(error); \r\n//             // call gemini if OpenAI rate limit exceeded\r\n//             if(error instanceof Error && error.message === 'RATE_LIMIT_EXCEEDED') {\r\n//                 try {\r\n//                     summary = await generateSummaryFromGemini(pdfText);\r\n//                     console.log({summary});\r\n//                 } catch(geminiError) {\r\n//                     console.error(\r\n//                         'Gemini API Failed after the OpenAI quota exceeded',\r\n//                         geminiError\r\n//                     );\r\n//                     return {\r\n//                         success: false,\r\n//                         message: \"Failed to generate Summary with available AI providers\",\r\n//                         data: null,\r\n//                     };\r\n//                 }\r\n//             } else {\r\n//                 // If it's not a rate limit error, rethrow\r\n//                 throw error;\r\n//             }\r\n//         }\r\n\r\n//         if(!summary) {\r\n//             return {\r\n//                 success: false,\r\n//                 message: \"Failed to generate Summary\",\r\n//                 data: null,\r\n//             };\r\n//         }\r\n\r\n//         return {\r\n//             success: true,\r\n//             message: \"Summary Generated Successfully!\",\r\n//             data: {\r\n//                 summary,    \r\n//             },\r\n//         };\r\n//     } catch (err) {\r\n//         console.error(\"Error in generatePDFSummary:\", err);\r\n//         return {\r\n//             success: false,\r\n//             message: \"Failed to process PDF\",\r\n//             data: null,\r\n//         };\r\n//     }\r\n// }\r\n\r\n\r\n\r\n\r\n'use server'\r\n\r\nimport { generateSummaryFromGemini } from \"@/lib/geminiai\";\r\nimport { fetchAndExtractPdfText } from \"@/lib/langchain\";\r\nimport { generateSummaryFromOpenAI } from \"@/lib/openai\";\r\n\r\nexport async function generatePDFSummary(uploadResponse: [{\r\n    serverData: {\r\n        userId: string;\r\n        file: {\r\n            url: string;\r\n            name: string;\r\n        };\r\n    };\r\n}]) {\r\n    if (!uploadResponse) {\r\n        return {\r\n            success: false,\r\n            message: \"File Upload Failed\",\r\n            data: null,\r\n        };\r\n    }\r\n    \r\n    const { serverData: {\r\n        userId, file: { url: pdfUrl, name: fileName },\r\n    },\r\n    } = uploadResponse[0];\r\n\r\n    if (!pdfUrl) {\r\n        return {\r\n            success: false,\r\n            message: \"File Upload Failed\",\r\n            data: null,\r\n        };\r\n    }\r\n    \r\n    try {\r\n        const pdfText = await fetchAndExtractPdfText(pdfUrl);\r\n        console.log(\"Extracted PDF text:\", {pdfText});\r\n\r\n        let summary;\r\n        let provider = 'Unknown';\r\n        \r\n        try {\r\n            summary = await generateSummaryFromOpenAI(pdfText);\r\n            provider = 'OpenAI';\r\n        } catch(error) {\r\n            console.log(\"OpenAI Error:\", error); \r\n            \r\n            if(error instanceof Error && error.message === 'RATE_LIMIT_EXCEEDED') {\r\n                try {\r\n                    summary = await generateSummaryFromGemini(pdfText);\r\n                    provider = 'Gemini';\r\n                } catch(geminiError) {\r\n                    console.error(\r\n                        'Gemini API Failed after the OpenAI quota exceeded',\r\n                        geminiError\r\n                    );\r\n                    return {\r\n                        success: false,\r\n                        message: \"Failed to generate Summary with available AI providers\",\r\n                        data: null,\r\n                    };\r\n                }\r\n            } else {\r\n                throw error;\r\n            }\r\n        }\r\n\r\n        if(!summary) {\r\n            return {\r\n                success: false,\r\n                message: \"Failed to generate Summary\",\r\n                data: null,\r\n            };\r\n        }\r\n\r\n        // Add provider information to the summary\r\n        const annotatedSummary = `This summary was generated by ${provider}:\\n\\n${summary}`;\r\n        \r\n        console.log(`Summary generated by ${provider}:`, {summary});\r\n\r\n        return {\r\n            success: true,\r\n            message: \"Summary Generated Successfully!\",\r\n            data: {\r\n                summary: annotatedSummary,\r\n                provider, // Still including the provider separately if needed\r\n            },\r\n        };\r\n    } catch (err) {\r\n        console.error(\"Error in generatePDFSummary:\", err);\r\n        return {\r\n            success: false,\r\n            message: \"Failed to process PDF\",\r\n            data: null,\r\n        };\r\n    }\r\n}"],"names":[],"mappings":";;;;;;IAuMsB,qBAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 20, "column": 0}, "map": {"version":3,"sources":["file:///E:/Project%20That%20I%20Can%20Done%20nd%20Git%20Upl/summarized-app/components/ui/button.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow-xs hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\n        outline:\n          \"border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80\",\n        ghost:\n          \"hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2 has-[>svg]:px-3\",\n        sm: \"h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5\",\n        lg: \"h-10 rounded-md px-6 has-[>svg]:px-4\",\n        icon: \"size-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean\n  }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      {...props}\n    />\n  )\n}\n\nexport { Button, buttonVariants }\n"],"names":[],"mappings":";;;;;AACA;AACA;AAEA;;;;;AAEA,MAAM,iBAAiB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACvB,+bACA;IACE,UAAU;QACR,SAAS;YACP,SACE;YACF,aACE;YACF,SACE;YACF,WACE;YACF,OACE;YACF,MAAM;QACR;QACA,MAAM;YACJ,SAAS;YACT,IAAI;YACJ,IAAI;YACJ,MAAM;QACR;IACF;IACA,iBAAiB;QACf,SAAS;QACT,MAAM;IACR;AACF;AAGF,SAAS,OAAO,EACd,SAAS,EACT,OAAO,EACP,IAAI,EACJ,UAAU,KAAK,EACf,GAAG,OAIF;IACD,MAAM,OAAO,UAAU,gKAAA,CAAA,OAAI,GAAG;IAE9B,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,4GAAA,CAAA,KAAE,AAAD,EAAE,eAAe;YAAE;YAAS;YAAM;QAAU;QACvD,GAAG,KAAK;;;;;;AAGf","debugId":null}},
    {"offset": {"line": 77, "column": 0}, "map": {"version":3,"sources":["file:///E:/Project%20That%20I%20Can%20Done%20nd%20Git%20Upl/summarized-app/components/ui/input.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Input({ className, type, ...props }: React.ComponentProps<\"input\">) {\n  return (\n    <input\n      type={type}\n      data-slot=\"input\"\n      className={cn(\n        \"file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        \"focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]\",\n        \"aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Input }\n"],"names":[],"mappings":";;;;AAEA;;;AAEA,SAAS,MAAM,EAAE,SAAS,EAAE,IAAI,EAAE,GAAG,OAAsC;IACzE,qBACE,8OAAC;QACC,MAAM;QACN,aAAU;QACV,WAAW,CAAA,GAAA,4GAAA,CAAA,KAAE,AAAD,EACV,mcACA,iFACA,0GACA;QAED,GAAG,KAAK;;;;;;AAGf","debugId":null}},
    {"offset": {"line": 103, "column": 0}, "map": {"version":3,"sources":["file:///E:/Project%20That%20I%20Can%20Done%20nd%20Git%20Upl/summarized-app/components/upload/upload-form-input.tsx"],"sourcesContent":["'use client';\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport {  Loader2 } from \"lucide-react\";\r\nimport { forwardRef } from \"react\";\r\ninterface UploadFormInputProps {\r\n    onSubmit: (e: React.FormEvent<HTMLFormElement>) => void;\r\n    isLoading : boolean;\r\n}\r\nconst UploadFormInput = forwardRef<HTMLFormElement,UploadFormInputProps>(({ onSubmit , isLoading}, ref) => {\r\n    return (\r\n        <form ref={ref} className=\"flex flex-col gap-6\" onSubmit={onSubmit}>\r\n            <div className=\"flex justify-end items-center gap-1.5\">\r\n                <Input\r\n                    id=\"file\"\r\n                    type=\"file\"\r\n                    name=\"file\"\r\n                    accept=\"application/pdf\"\r\n                    required\r\n                    className={cn(isLoading &&  'opacity-50 cursor-not-allowed')}\r\n                    disabled ={isLoading}\r\n                    />\r\n                <Button disabled = {isLoading}>{isLoading ? (<><Loader2 className=\"mr-2 h-4 w-4 animate-spin\"/>Processing.....</>):('Upload Your PDF')}</Button>\r\n            </div>\r\n        </form>\r\n    );\r\n})\r\nUploadFormInput.displayName = \"UploadFormInput\"\r\n// export default function UploadFormInput({ onSubmit }:UploadFormInputProps){\r\n//     return (\r\n//         <form className=\"flex flex-col gap-6\" onSubmit={onSubmit}>\r\n//             <div className=\"flex justify-end items-center gap-1.5\">\r\n//             <Input\r\n//             id=\"file\"\r\n//             type=\"file\"\r\n//             name=\"file\"\r\n//             accept=\"application/pdf\"\r\n//             required\r\n//             className=\"\" />\r\n//             <Button>Upload Your PDF</Button>\r\n//             </div>\r\n//         </form>\r\n//     )\r\n// }\r\n\r\nexport default UploadFormInput; "],"names":[],"mappings":";;;;AACA;AACA;AACA;AACA;AACA;AALA;;;;;;;AAUA,MAAM,gCAAkB,CAAA,GAAA,qMAAA,CAAA,aAAU,AAAD,EAAwC,CAAC,EAAE,QAAQ,EAAG,SAAS,EAAC,EAAE;IAC/F,qBACI,8OAAC;QAAK,KAAK;QAAK,WAAU;QAAsB,UAAU;kBACtD,cAAA,8OAAC;YAAI,WAAU;;8BACX,8OAAC,0HAAA,CAAA,QAAK;oBACF,IAAG;oBACH,MAAK;oBACL,MAAK;oBACL,QAAO;oBACP,QAAQ;oBACR,WAAW,CAAA,GAAA,4GAAA,CAAA,KAAE,AAAD,EAAE,aAAc;oBAC5B,UAAW;;;;;;8BAEf,8OAAC,2HAAA,CAAA,SAAM;oBAAC,UAAY;8BAAY,0BAAa;;0CAAE,8OAAC,iNAAA,CAAA,UAAO;gCAAC,WAAU;;;;;;4BAA6B;;uCAAqB;;;;;;;;;;;;;;;;;AAIpI;AACA,gBAAgB,WAAW,GAAG;uCAkBf","debugId":null}},
    {"offset": {"line": 179, "column": 0}, "map": {"version":3,"sources":["file:///E:/Project%20That%20I%20Can%20Done%20nd%20Git%20Upl/summarized-app/utils/uploadthing.ts"],"sourcesContent":["import {OurFileRouter} from '@/app/api/uploadthing/core'\r\n\r\nimport { generateReactHelpers } from \"@uploadthing/react\";\r\n\r\nexport const { useUploadThing } = \r\ngenerateReactHelpers<OurFileRouter>();"],"names":[],"mappings":";;;AAEA;;AAEO,MAAM,EAAE,cAAc,EAAE,GAC/B,CAAA,GAAA,kLAAA,CAAA,uBAAoB,AAAD","debugId":null}},
    {"offset": {"line": 191, "column": 0}, "map": {"version":3,"sources":["file:///E:/Project%20That%20I%20Can%20Done%20nd%20Git%20Upl/summarized-app/components/upload/upload-form.tsx"],"sourcesContent":["// // 'use client'\r\n// // import UploadFormInput from \"@/components/upload/upload-form-input\";\r\n// // import { useUploadThing } from \"@/utils/uploadthing\";\r\n// // import { useSonner } from \"sonner\"\r\n\r\n\r\n// // import { z } from 'zod'\r\n\r\n\r\n// // const schema = z.object({\r\n// //     file: z.instanceof(File, { message: 'Invalid FIle' }).refine((file) => file.size <= 15 * 1024 * 1024,\r\n// //     )\r\n// //         .refine((file) => file.type.startsWith('application/pdf'),\r\n// //             { message: 'File must be a PDF' }\r\n// //         ),\r\n// // });\r\n// // export default function UploadForm() {\r\n\r\n\r\n// //     const { startUpload } = useUploadThing\r\n// //         ('pdfUploader', {\r\n// //             onClientUploadComplete: () => {\r\n// //                 console.log(\"uploaded successfully!\");\r\n// //             },\r\n// //             onUploadError: (error) => {\r\n// //                 console.error(\"error occurred while uploading\", error);\r\n// //             },\r\n// //             onUploadBegin: ({ file }) => {\r\n// //                 console.log(\"upload has begun for\", file);\r\n// //             },\r\n// //         });\r\n\r\n// //     const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\r\n// //         e.preventDefault();\r\n// //         console.log(\"Form submitted\");\r\n// //         const formData = new FormData(e.currentTarget);\r\n// //         const file = formData.get(\"file\") as File;\r\n\r\n// //         // validating the fields that the form have/\r\n// //         const validatedFields = schema.safeParse({ file });\r\n\r\n// //         console.log(validatedFields);\r\n\r\n// //         if (!validatedFields.success) {\r\n// //             console.log(\r\n// //                 validatedFields.error.flatten().fieldErrors.file?.\r\n// //                 [0] ?? 'Invalid file'\r\n// //             );\r\n// //             return;\r\n// //         }\r\n// //         // schema validation with zod \r\n// //         // upload the file to Upload Things \r\n// //         const resp = await startUpload([file]);\r\n// //         if (!resp) {\r\n// //             return;\r\n// //         }\r\n// //         //parse the pdf int lang chain\r\n// //         // Summarized the pdf into the valuable insides\r\n// //         // save the summary to the database\r\n// //         // and after this redirect to the summary page as well as the summary\r\n\r\n\r\n// //     };\r\n// //     return (\r\n// //         <div className=\"flex flex-col gap-8 w-full max-w-2xl mx-auto\">\r\n// //             <UploadFormInput onSubmit={handleSubmit} />\r\n// //         </div>\r\n// //     );\r\n// // }\r\n\r\n// // 'use client'\r\n\r\n// // import UploadFormInput from \"@/components/upload/upload-form-input\"\r\n// // import { useUploadThing } from \"@/utils/uploadthing\"\r\n// // import { toast } from \"sonner\" // ✅ Import toast here\r\n// // import { z } from \"zod\"\r\n\r\n// // const schema = z.object({\r\n// //     file: z\r\n// //         .instanceof(File, { message: \"Invalid File\" })\r\n// //         .refine((file) => file.size <= 15 * 1024 * 1024, {\r\n// //             message: \"File size must be under 15MB\",\r\n// //         })\r\n// //         .refine((file) => file.type.startsWith(\"application/pdf\"), {\r\n// //             message: \"File must be a PDF\",\r\n// //         }),\r\n// // })\r\n\r\n// // export default function UploadForm() {\r\n// //     const { startUpload } = useUploadThing(\"pdfUploader\", {\r\n// //         onClientUploadComplete: () => {\r\n// //             // console.log(\"uploaded successfully!\")\r\n// //             toast.success(\"Uploaded successfully!\")\r\n// //         },\r\n// //         onUploadError: (error) => {\r\n// //             // console.error(\"error occurred while uploading\", error)\r\n// //             toast.error(\"Upload failed\", {\r\n// //                 description: error.message,\r\n// //             })\r\n// //         },\r\n// //         onUploadBegin: ({ file }) => {\r\n// //             console.log(\"upload has begun for\", file)\r\n// //             toast(\"Uploading...\", {\r\n// //                 description: file.name,\r\n// //             })\r\n// //         },\r\n// //     })\r\n\r\n// //     const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\r\n// //         e.preventDefault()\r\n// //         console.log(\"Form submitted\")\r\n\r\n// //         const formData = new FormData(e.currentTarget)\r\n// //         const file = formData.get(\"file\") as File\r\n\r\n// //         const validatedFields = schema.safeParse({ file })\r\n\r\n// //         if (!validatedFields.success) {\r\n// //             const message =\r\n// //                 validatedFields.error.flatten().fieldErrors.file?.[0] ?? \"Invalid file\"\r\n// //             toast.error(\"Validation Error\", {\r\n// //                 description: message,\r\n// //                 className: \"bg-red-100 text-red-800 border border-red-400\", // like \"destructive\"\r\n// //                 icon: \"❌\",\r\n// //             })\r\n// //             //     toast(\"Validation Error\", {\r\n// //             //   description: message,\r\n// //             //   className: \"bg-red-100 text-red-800 border border-red-400\", // like \"destructive\"\r\n// //             //   icon: \"❌\",\r\n// //             // })\r\n// //             return\r\n// //         }\r\n// //         toast('Uploading.......',\r\n// //             {\r\n// //                 description: 'We are uploading your pdf!',\r\n// //             }\r\n// //         )\r\n// //         const resp = await startUpload([file])\r\n\r\n// //         if (!resp) {\r\n// //             toast(\"Something went wrong during upload\",{\r\n// //                 description:'please used another file',\r\n// //                 className: \"bg-red-100 text-red-800 border border-red-400\"\r\n// //             })\r\n// //             return;\r\n// //         }\r\n// //         toast('Processing the PDF',\r\n// //             {\r\n// //                 description: 'Hang tight!  Our AI is reading through your document .',\r\n// //             }\r\n// //         )\r\n\r\n// //         // Further steps after successful upload (e.g., call backend or redirect)\r\n// //     }\r\n\r\n// //     return (\r\n// //         <div className=\"flex flex-col gap-8 w-full max-w-2xl mx-auto\">\r\n// //             <UploadFormInput onSubmit={handleSubmit} />\r\n// //         </div>\r\n// //     )\r\n// // }\r\n\r\n\r\n// 'use client'\r\n// import { generatePDFSummary } from \"@/app/actions/upload-action\"\r\n// import UploadFormInput from \"@/components/upload/upload-form-input\"\r\n// import { useUploadThing } from \"@/utils/uploadthing\"\r\n// import { toast } from \"sonner\"\r\n// import { z } from \"zod\"\r\n\r\n// const schema = z.object({\r\n//     file: z\r\n//         .instanceof(File, { message: \"Invalid File\" })\r\n//         .refine((file) => file.size <= 15 * 1024 * 1024, {\r\n//             message: \"File size must be under 15MB\",\r\n//         })\r\n//         .refine((file) => file.type.startsWith(\"application/pdf\"), {\r\n//             message: \"File must be a PDF\",\r\n//         }),\r\n// })\r\n\r\n// export default function UploadForm() {\r\n//     const { startUpload } = useUploadThing(\"pdfUploader\", {\r\n//         onClientUploadComplete: (res) => {\r\n//             toast.success(\"Upload complete!\", {\r\n//                 description: \"Your PDF is being processed.\",\r\n//             })\r\n//             console.log(\"Uploaded files:\", res) // Debug uploaded files\r\n//         },\r\n//         onUploadError: (error) => {\r\n//             toast.error(\"Upload failed\", {\r\n//                 description: error.message || \"Please try again.\",\r\n//             })\r\n//             console.error(\"UploadThing error:\", error) // Log full error\r\n//         },\r\n//     })\r\n\r\n//     const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\r\n//         e.preventDefault()\r\n//         const formData = new FormData(e.currentTarget)\r\n//         const file = formData.get(\"file\") as File\r\n\r\n//         // Debug: Log file details\r\n//         console.log(\"Selected file:\", {\r\n//             name: file.name,\r\n//             type: file.type,\r\n//             size: file.size,\r\n//         })\r\n\r\n//         // Validate file\r\n//         const validatedFields = schema.safeParse({ file })\r\n//         if (!validatedFields.success) {\r\n//             const errorMessage = validatedFields.error.flatten().fieldErrors.file?.[0] ?? \"Invalid file\"\r\n//             toast.error(\"Validation error\", {\r\n//                 description: errorMessage,\r\n//             })\r\n//             return\r\n//         }\r\n\r\n//         // Start upload\r\n//         const uploadToast = toast.loading(\"Uploading your PDF📝\")\r\n//         try {\r\n//             const resp = await startUpload([file])\r\n//             if (!resp) {\r\n//                 toast.error(\"Upload failed\", {\r\n//                     description: \"No response received.\",\r\n//                     id: uploadToast,\r\n//                 })\r\n//                 return\r\n//             }\r\n//             toast.success(\"Processing started!\", {\r\n//                 description: \"AI is analyzing your document...\",\r\n//                 id: uploadToast,\r\n//             })\r\n//         } catch (err) {\r\n//             toast.error(\"Unexpected error\", {\r\n//                 description: \"Please try again later.\",\r\n//                 id: uploadToast,\r\n//             })\r\n//             console.error(\"Submission error:\", err)\r\n//         };\r\n\r\n//         // parse the pdf using langchain \r\n//         const summary = await generatePDFSummary(resp);\r\n//         console.log({summary});\r\n        \r\n//         // Summaries the pdf Using AI\r\n//         //  save the summary to the database \r\n//         // redirect to the  [id] summary page\r\n\r\n\r\n//     };\r\n\r\n//     return (\r\n//         <div className=\"flex flex-col gap-8 w-full max-w-2xl mx-auto\">\r\n//             <UploadFormInput onSubmit={handleSubmit} />\r\n//         </div>\r\n//     )\r\n// }\r\n\r\n// new chatgot \r\n\r\n\r\n// 'use client'\r\n// import { generatePDFSummary } from \"@/app/actions/upload-action\"\r\n// import UploadFormInput from \"@/components/upload/upload-form-input\"\r\n// import { useUploadThing } from \"@/utils/uploadthing\"\r\n// import { toast } from \"sonner\"\r\n// import { z } from \"zod\"\r\n// import { useRouter } from \"next/navigation\"\r\n\r\n// // Define types for better type safety\r\n// type UploadResponse = {\r\n//     name: string;\r\n//     size: number;\r\n//     key: string;\r\n//     url: string;\r\n//     // Add other properties you expect from the upload response\r\n// }[];\r\n\r\n// const schema = z.object({\r\n//     file: z\r\n//         .instanceof(File, { message: \"Invalid File\" })\r\n//         .refine((file) => file.size <= 15 * 1024 * 1024, {\r\n//             message: \"File size must be under 15MB\",\r\n//         })\r\n//         .refine((file) => file.type.startsWith(\"application/pdf\"), {\r\n//             message: \"File must be a PDF\",\r\n//         }),\r\n// })\r\n\r\n// export default function UploadForm() {\r\n//     const router = useRouter()\r\n//     const { startUpload } = useUploadThing(\"pdfUploader\", {\r\n//         onClientUploadComplete: (res) => {\r\n//             toast.success(\"Upload complete!\", {\r\n//                 description: \"Your PDF is being processed.\",\r\n//             })\r\n//             console.log(\"Uploaded files:\", res)\r\n//         },\r\n//         onUploadError: (error) => {\r\n//             toast.error(\"Upload failed\", {\r\n//                 description: error.message || \"Please try again.\",\r\n//             })\r\n//             console.error(\"UploadThing error:\", error)\r\n//         },\r\n//     })\r\n\r\n//     const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\r\n//         e.preventDefault()\r\n//         const formData = new FormData(e.currentTarget)\r\n//         const file = formData.get(\"file\") as File\r\n\r\n//         console.log(\"Selected file:\", {\r\n//             name: file.name,\r\n//             type: file.type,\r\n//             size: file.size,\r\n//         })\r\n\r\n//         const validatedFields = schema.safeParse({ file })\r\n//         if (!validatedFields.success) {\r\n//             const errorMessage = validatedFields.error.flatten().fieldErrors.file?.[0] ?? \"Invalid file\"\r\n//             toast.error(\"Validation error\", {\r\n//                 description: errorMessage,\r\n//             })\r\n//             return\r\n//         }\r\n\r\n//         const uploadToast = toast.loading(\"Uploading your PDF📝\")\r\n//         try {\r\n//             const uploadResponse = await startUpload([file])\r\n//             if (!uploadResponse || uploadResponse.length === 0) {\r\n//                 toast.error(\"Upload failed\", {\r\n//                     description: \"No files were uploaded.\",\r\n//                     id: uploadToast,\r\n//                 })\r\n//                 return\r\n//             }\r\n\r\n//             // Get the first file from the response\r\n//             const uploadedFile = uploadResponse[0]\r\n            \r\n//             // Prepare the data structure that generatePDFSummary expects\r\n//             const summaryData = {\r\n//                 serverData: {\r\n//                     userId: \"current-user-id\", // You should replace this with actual user ID\r\n//                     file: {\r\n//                         url: uploadedFile.url,\r\n//                         name: uploadedFile.name\r\n//                     }\r\n//                 }\r\n//             }\r\n\r\n//             toast.success(\"Processing started!\", {\r\n//                 description: \"AI is analyzing your document...\",\r\n//                 id: uploadToast,\r\n//             })\r\n\r\n//             // Process the uploaded file\r\n//             const summary = await generatePDFSummary([summaryData])\r\n//             console.log({summary})\r\n\r\n//             // TODO: Save summary to database\r\n//             // TODO: Redirect to summary page\r\n//             // router.push(`/summary/${summary.id}`)\r\n\r\n//         } catch (err) {\r\n//             toast.error(\"Unexpected error\", {\r\n//                 description: \"Please try again later.\",\r\n//                 id: uploadToast,\r\n//             })\r\n//             console.error(\"Submission error:\", err)\r\n//         }\r\n//     }\r\n\r\n//     return (\r\n//         <div className=\"flex flex-col gap-8 w-full max-w-2xl mx-auto\">\r\n//             <UploadFormInput onSubmit={handleSubmit} />\r\n//         </div>\r\n//     )\r\n// }\r\n\r\n'use client'\r\nimport { generatePDFSummary } from \"@/actions/upload-action\"\r\nimport UploadFormInput from \"@/components/upload/upload-form-input\"\r\nimport { useUploadThing } from \"@/utils/uploadthing\"\r\nimport { toast } from \"sonner\"\r\nimport { z } from \"zod\"\r\nimport { useRouter } from \"next/navigation\"\r\nimport { useRef, useState } from \"react\"\r\n\r\nconst schema = z.object({\r\n    file: z\r\n        .instanceof(File, { message: \"Invalid File\" })\r\n        .refine((file) => file.size <= 15 * 1024 * 1024, {\r\n            message: \"File size must be under 15MB\",\r\n        })\r\n        .refine((file) => file.type.startsWith(\"application/pdf\"), {\r\n            message: \"File must be a PDF\",\r\n        }),\r\n})\r\n\r\nexport default function UploadForm() {\r\n    const router = useRouter();\r\n    const formRef = useRef<HTMLFormElement>(null);\r\n    const [isLoading , setIsLoading]= useState(false);\r\n    const { startUpload } = useUploadThing(\"pdfUploader\", {\r\n        onClientUploadComplete: () => {\r\n            toast.success(\"Upload complete!\")\r\n        },\r\n        onUploadError: (error) => {\r\n            toast.error(\"Upload failed\", {\r\n                description: error.message || \"Please try again.\",\r\n            })\r\n        },\r\n    })\r\n\r\n    const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n        try{\r\n            setIsLoading(true);\r\n          \r\n    // startrtrtrtrtrt\r\nconst formData = new FormData(e.currentTarget)\r\n        const file = formData.get(\"file\") as File\r\n\r\n        // Validate file\r\n        const validatedFields = schema.safeParse({ file })\r\n        if (!validatedFields.success) {\r\n            const errorMessage = validatedFields.error.flatten().fieldErrors.file?.[0] ?? \"Invalid file\"\r\n            toast.error(\"Validation error\", {\r\n                description: errorMessage,\r\n            });\r\n             setIsLoading(false);\r\n            return;\r\n        }\r\n\r\n        // Start upload process\r\n        const uploadToast = toast.loading(\"Uploading your PDF...\", {\r\n            description: \"Please wait while we upload your file\",\r\n        })\r\n\r\n        try {\r\n            // Upload the file\r\n            const uploadResponse = await startUpload([file])\r\n            if (!uploadResponse || uploadResponse.length === 0) {\r\n                toast.error(\"Upload failed\", {\r\n                    description: \"No files were uploaded.\",\r\n                    id: uploadToast,\r\n                });\r\n                 setIsLoading(false);\r\n                return;\r\n            }\r\n\r\n            // Update toast to show processing\r\n            toast.loading(\"📄 Processing your PDF...\", {\r\n                description: \"Hang tight! Our AI is reading through your document\",\r\n                id: uploadToast,\r\n            }) \r\n\r\n            // Get the first file from the response\r\n            const uploadedFile = uploadResponse[0]\r\n            \r\n            // Prepare data for processing\r\n            const summaryData = {\r\n                serverData: {\r\n                    userId: \"current-user-id\", // Replace with actual user ID\r\n                    file: {\r\n                        url: uploadedFile.url,\r\n                        name: uploadedFile.name\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Process the uploaded file\r\n            const summary = await generatePDFSummary([summaryData])\r\n             const {data = null, message = null} = summary ||{};\r\n             if (data){\r\n                 toast.loading(\"📄 Saving your PDF...\", {\r\n                description: \"Hang tight! We are Saving your Summary\",\r\n                id: uploadToast,\r\n            });\r\n            formRef.current?.reset(); \r\n            if(data.summary){\r\n                \r\n            }\r\n             }\r\n    //         // Success - update toast\r\n            toast.success(\"Processing complete!\", {\r\n                description: \"Your document has been analyzed\",\r\n                id: uploadToast,\r\n            })\r\n\r\n            // console.log(\"Generated summary:\", summary)\r\n\r\n            // TODO: Save summary to database\r\n            // TODO: Redirect to summary page\r\n            // router.push(`/summary/${summary.id}`)\r\n\r\n        } catch (err) {\r\n            console.error(\"Error during upload or processing:\", err)\r\n            toast.error(\"Processing failed\", {\r\n                description: \"There was an error analyzing your document\",\r\n                id: uploadToast,\r\n            })\r\n        }\r\n// enddddsdfdfgfgfg\r\n        }catch(error){\r\n             setIsLoading(false);\r\n            console.error('Error Occurs', error);\r\n            \r\n            formRef.current?.reset(); \r\n        }\r\n        \r\n           \r\n    };\r\n\r\n    return (\r\n        <div className=\"flex flex-col gap-8 w-full max-w-2xl mx-auto\">\r\n            <UploadFormInput \r\n            isLoading={isLoading}\r\n            ref={formRef} \r\n            onSubmit={handleSubmit} />\r\n        </div>\r\n    )\r\n}"],"names":[],"mappings":"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","debugId":null}}]
}